plugins {
    id 'java'
}

group = 'fr.anarchick'
version = '1.0.0'

repositories {
    mavenCentral()
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
}

dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'
    compileOnly 'org.spigotmc:spigot-api:1.13-R0.1-SNAPSHOT'
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    testCompileOnly 'org.projectlombok:lombok:1.18.32'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'
}

def targetJavaVersion = 17

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

task export() {
    group = "other"
    description = "build gradle into external folder"
    def fromFile = 'build/libs/'+archivesBaseName+'-'+version+'.jar'
    def destinations = [
            'C:/Users/aeim/Documents/minecraft/law/server/FloatingRealms/plugins',
            'C:/Users/aeim/Documents/minecraft/law/programming/FloatingRealmsCore/libs',
            'C:/Users/aeim/Documents/minecraft/law/programming/ValheimFood/libs',
            'C:/Users/aeim/Documents/minecraft/law/programming/VanillaMissingFeatures/libs',
            'C:/Users/aeim/Documents/minecraft/law/programming/Anapi/libs'
    ]
    doLast {
        destinations.each {dest ->
            def destDir = file(dest)
            if (destDir.exists()) {
                copy {
                    from fromFile
                    into destDir
                }
            } else {
                println "The folder '" + destDir + "' does not exist"
            }
        }
    }
}

build.finalizedBy export